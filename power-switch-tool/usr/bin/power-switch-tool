#!/bin/bash

# Color definitions for terminal output
RED='\033[0;91m'
YELLOW='\033[0;93m'
NC='\033[0m'

# Determine if we're running in a terminal (1) or not (0)
in_terminal=$([[ -t 0 ]] && echo 1 || echo 0)

# Usage message displayed for help and errors
usage_text="${YELLOW}Usage: ${NC}$(basename "$0") [-h : help command] [-t true|false|0|1 : force whether or not to act as if the command were run in the terminal] [-s : silent mode, whether or not the command should be quiet${YELLOW} Warning, this option will also be silent about errors!${NC}]"

silent_flag=0

# Process command line options
while getopts ":ht:s" opt; do
	case "$opt" in
		h)
			# Display help if not in silent mode
			if [[ $silent_flag -eq 0 ]]; then
				echo -e "${usage_text}"
			fi
			exit 0
			;;
		t)
			# Force terminal mode: convert parameter to lowercase for consistency
			t_param="${OPTARG,,}"
			# Validate the provided option value
			if [[ "$t_param" != "true" && "$t_param" != "false" && "$t_param" != "0" && "$t_param" != "1" ]]; then
				if [[ $silent_flag -eq 0 ]]; then
					error_malformed="${RED}Error: Invalid value for -t. Expected true/false or 0/1.${NC}\n${usage_text}"
					if [[ $in_terminal -eq 1 ]]; then
						echo -e "${error_malformed}"
					else
						# Fallback notifications for non-terminal environments
						if command -v zenity >/dev/null 2>&1; then
							zenity --error --text="${error_malformed}" --title="PST Error"
						elif command -v notify-send >/dev/null 2>&1; then
							notify-send "PST Error" "${error_malformed}"
						elif command -v xmessage >/dev/null 2>&1; then
							xmessage -center "${error_malformed}"
						elif command -v kdialog >/dev/null 2>&1; then
							kdialog --error "${error_malformed}"
						fi
					fi
				fi
				exit 1
			fi
			# Normalize human-friendly booleans into terminal flag (1 or 0)
			in_terminal=$([[ "$t_param" == "true" || "$t_param" == "1" ]] && echo 1 || echo 0)
			;;
		s)
			# Enable silent mode (suppresses normal output)
			silent_flag=1
			;;
		\?)
			# Catch any invalid options
			if [[ $silent_flag -eq 0 ]]; then
				echo -e "${RED}Error: Invalid option -$OPTARG ${NC}\n${usage_text}]"
			fi
			exit 1
			;;
		:)
			# Option requires an argument but wasn't provided
			if [[ $silent_flag -eq 0 ]]; then
				echo -e "${RED}Error: Option -$OPTARG requires an argument. ${NC}\n${usage_text}]"
			fi
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# Verify that the 'powerprofilesctl' utility is installed
if ! command -v powerprofilesctl >/dev/null 2>&1; then
	if [[ $silent_flag -eq 0 ]]; then
		error_not_found="${RED}PST ERROR: \"powerprofilesctl\" not found! This utility cannot function without it. Please verify you have it installed!${NC}"
		if [[ $in_terminal -eq 1 ]]; then
			echo -e "${error_not_found}"
		else
			# Attempt to alert user through graphical notifications
			if command -v zenity >/dev/null 2>&1; then
				zenity --error --text="${error_not_found}" --title="PST Error"
			elif command -v notify-send >/dev/null 2>&1; then
				notify-send "PST Error" "${error_not_found}"
			elif command -v xmessage >/dev/null 2>&1; then
				xmessage -center "${error_not_found}"
			elif command -v kdialog >/dev/null 2>&1; then
				kdialog --error "${error_not_found}"
			fi
		fi
	fi
	exit 1
fi

# Load available power profiles into an array
mapfile -t profile_array < <(powerprofilesctl list | grep -oP '[a-zA-Z0-9\-_]+(?=:$)' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Ensure at least one power profile was found
if [[ ${#profile_array[@]} -eq 0 ]]; then
	if [[ $silent_flag -eq 0 ]]; then
		error_no_profiles="${RED}PST ERROR: No power profiles found!${NC}"
		if [[ $in_terminal -eq 1 ]]; then
			echo -e "${error_no_profiles}"
		else
			# Use graphical error notifications if available
			if command -v zenity >/dev/null 2>&1; then
				zenity --error --text="${error_no_profiles}" --title="PST Error"
			elif command -v notify-send >/dev/null 2>&1; then
				notify-send "PST Error" "${error_no_profiles}"
			elif command -v xmessage >/dev/null 2>&1; then
				xmessage -center "${error_no_profiles}"
			elif command -v kdialog >/dev/null 2>&1; then
				kdialog --error "${error_no_profiles}"
			fi
		fi
	fi
	exit 1
fi

# Retrieve the current power profile
current_profile=$(powerprofilesctl get)
found_index=""

# Identify the index of the current profile within the list
for index in "${!profile_array[@]}"; do
	if [[ "${profile_array[$index]}" == "$current_profile" ]]; then
		found_index="$index"
		break
	fi
done

# If the current profile isn't found, issue an error
if [[ -z "$found_index" ]]; then
	if [[ $silent_flag -eq 0 ]]; then
		error_not_found="${RED}PST ERROR: Current profile \"$current_profile\" not found in the profile list!${NC}"
		if [[ $in_terminal -eq 1 ]]; then
			echo -e "$error_not_found"
		else
			# Fallback to graphical error messages
			if command -v zenity >/dev/null 2>&1; then
				zenity --error --text="$error_not_found" --title="PST Error"
			elif command -v notify-send >/dev/null 2>&1; then
				notify-send "PST Error" "$error_not_found"
			elif command -v xmessage >/dev/null 2>&1; then
				xmessage -center "$error_not_found"
			elif command -v kdialog >/dev/null 2>&1; then
				kdialog --error "$error_not_found"
			fi
		fi
	fi
	exit 1
fi

# Calculate the next profile index in a cyclic manner
set_index=$(( (found_index + 1) % ${#profile_array[@]} ))

# Try to switch to the next power profile
if ! powerprofilesctl set "${profile_array[$set_index]}" >/dev/null 2>&1; then
	if [[ $silent_flag -eq 0 ]]; then
		error_set_fail="${RED}PST ERROR: Failed to set power profile to \"${profile_array[$set_index]}\"!${NC}"
		if [[ $in_terminal -eq 1 ]]; then
			echo -e "$error_set_fail"
		else
			# Notify via GUI if terminal output is not available
			if command -v zenity >/dev/null 2>&1; then
				zenity --error --text="$error_set_fail" --title="PST Error"
			elif command -v notify-send >/dev/null 2>&1; then
				notify-send "PST Error" "$error_set_fail"
			elif command -v xmessage >/dev/null 2>&1; then
				xmessage -center "$error_set_fail"
			elif command -v kdialog >/dev/null 2>&1; then
				kdialog --error "$error_set_fail"
			fi
		fi
	fi
	exit 1
fi

# Success: prepare notification message for the new power profile
power_notif="Power profile set: \"${profile_array[$set_index]}\""
if [[ $silent_flag -eq 0 ]]; then
	# Provide output or graphical notification depending on environment
	if [[ $in_terminal -eq 1 ]]; then
		echo "${power_notif}"
	else
		if command -v notify-send >/dev/null 2>&1; then
			notify-send "PST" "${power_notif}" -t 3000
		elif command -v dunstify >/dev/null 2>&1; then
			dunstify -t 3000 "PST" "${power_notif}"
		elif command -v zenity >/dev/null 2>&1; then
			(zenity --info --text="${power_notif}" --timeout=3) &
		elif command -v xmessage >/dev/null 2>&1; then
			( xmessage "${power_notif}" & sleep 3; kill $! ) &
		fi
	fi
fi

